!function(e){var o=function(){for(var e=arguments[0],i=[].slice.call(arguments,1),n=0;n<i.length;++n){var t=i[n];for(key in t){var r=t[key];e[key]="object"==typeof r?o("object"==typeof e[key]?e[key]:{},r):r}}return e},i={wav:"WebAudioRecorderWav.min.js",ogg:"WebAudioRecorderOgg.min.js",mp3:"WebAudioRecorderMp3.min.js"},n={workerDir:"/",numChannels:2,encoding:"wav",options:{timeLimit:300,encodeAfterRecord:!1,progressInterval:1e3,bufferSize:void 0,wav:{mimeType:"audio/wav"},ogg:{mimeType:"audio/ogg",quality:.5},mp3:{mimeType:"audio/mpeg",bitRate:160}}},t=function(e,i){o(this,n,i||{}),this.context=e.context,null==this.context.createScriptProcessor&&(this.context.createScriptProcessor=this.context.createJavaScriptNode),this.input=this.context.createGain(),e.connect(this.input),this.buffer=[],this.initWorker()};o(t.prototype,{isRecording:function(){return null!=this.processor},setEncoding:function(e){this.isRecording()?this.error("setEncoding: cannot set encoding during recording"):this.encoding!==e&&(this.encoding=e,this.initWorker())},setOptions:function(e){this.isRecording()?this.error("setOptions: cannot set options during recording"):(o(this.options,e),this.worker.postMessage({command:"options",options:this.options}))},startRecording:function(){if(this.isRecording())this.error("startRecording: previous recording is running");else{var e=this.numChannels,o=this.buffer,i=this.worker;this.processor=this.context.createScriptProcessor(this.options.bufferSize,this.numChannels,this.numChannels),this.input.connect(this.processor),this.processor.connect(this.context.destination),this.processor.onaudioprocess=function(n){for(var t=0;t<e;++t)o[t]=n.inputBuffer.getChannelData(t);i.postMessage({command:"record",buffer:o})},this.worker.postMessage({command:"start",bufferSize:this.processor.bufferSize}),this.startTime=Date.now()}},recordingTime:function(){return this.isRecording()?.001*(Date.now()-this.startTime):null},cancelRecording:function(){this.isRecording()?(this.input.disconnect(),this.processor.disconnect(),delete this.processor,this.worker.postMessage({command:"cancel"})):this.error("cancelRecording: no recording is running")},finishRecording:function(){this.isRecording()?(this.input.disconnect(),this.processor.disconnect(),delete this.processor,this.worker.postMessage({command:"finish"})):this.error("finishRecording: no recording is running")},cancelEncoding:function(){this.options.encodeAfterRecord?this.isRecording()?this.error("cancelEncoding: recording is not finished"):(this.onEncodingCanceled(this),this.initWorker()):this.error("cancelEncoding: invalid method call")},initWorker:function(){null!=this.worker&&this.worker.terminate(),this.onEncoderLoading(this,this.encoding),this.worker=new Worker(this.workerDir+i[this.encoding]);var e=this;this.worker.onmessage=function(o){var i=o.data;switch(i.command){case"loaded":e.onEncoderLoaded(e,e.encoding);break;case"timeout":e.onTimeout(e);break;case"progress":e.onEncodingProgress(e,i.progress);break;case"complete":e.onComplete(e,i.blob);break;case"error":e.error(i.message)}},this.worker.postMessage({command:"init",config:{sampleRate:this.additional_config.sampleRate||this.context.sampleRate,numChannels:this.numChannels},options:{...this.options,...this.additional_config}})},error:function(e){this.onError(this,"WebAudioRecorder.min.js:"+e)},onEncoderLoading:function(e,o){},onEncoderLoaded:function(e,o){},onTimeout:function(e){e.finishRecording()},onEncodingProgress:function(e,o){},onEncodingCanceled:function(e){},onComplete:function(e,o){e.onError(e,"WebAudioRecorder.min.js: You must override .onComplete event")},onError:function(e,o){console.log(o)}}),e.WebAudioRecorder=t}(window);